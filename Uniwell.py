# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets

remove = '''
I will send you the instructions on how to download and enter your application in case you do not have them.

Upon opening the app, please choose "I already have an account", then "Continue with email" and you will be taken to Log in screen, make sure you enter the correct email.

Your login is u_email_address and your pin code is '8713'.

You will find the u_link to download the app below:

app_link

Also, please keep in mind that if you want to use our app, the minimum supported version of the operating system is min_android_apple.
'''

why_charged = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

We are sorry that the subscription information was unclear to you before the purchase.

Your subscription was canceled, there will be no other charges.
u_remove
Since something caused you to stop using our service in past. Could you please tell us in more detail why you decided to leave attempts to follow our plan back then? Have you had any problems with our product?
u_experience
I would really appreciate your feedback and honesty since it will greatly help us to improve our product.

Looking forward to hearing from you soon!

Regards,
agent_name
u_product_name Team'''

why_charged_short = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

We are sorry that the subscription information was unclear to you before the purchase.

Your subscription was canceled, there will be no other charges.
u_remove
Since something caused you to stop using our service in past. Could you please tell us in more detail why you decided to leave attempts to follow our plan back then? Have you had any problems with our product?
u_experience
I would really appreciate your feedback and honesty since it will greatly help us to improve our product.

Looking forward to hearing from you soon!

Regards,
agent_name
u_product_name Team'''

pp_refund_descriptor = '''Hello user_name,

Thanks for your email.

Let me explain your subscription terms.

You have purchased a personalized plan: u_product_name.

The email used for registrations is - u_email_address.

Our service is subscription based. Our payment provider makes the charge you have received for the renewal of the subscription.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

We are sorry that the subscription information was unclear to you before the purchase.

Your u_product_name subscription was successfully cancelled. No additional charges will occur.

Your refund of refund_sum u_currency has been processed. It may take up to 5 days for it to reflect in your Paypal balance. If you paid by debit or credit card, the money will be refunded to your card. Depending on your card issuer, it may take up to 10 days for your refund to appear on a bank statement.

We do really care for our customers and are willing to improve our service further. Could you please share the reason for your dissatisfaction in more detail? 

Your answer will help us to understand what was wrong and will give us the possibility to resolve the issue in the best way!

We are sorry for any problems you have experienced with our product. However, we will be happy if you change your mind.

Looking forward to your reply.

Regards,
agent_name
u_product_name Team'''

pp_refund_descriptor_short = '''Hello user_name,

Thanks for your email.

You have purchased a personalized plan: u_product_name.

The email used for registrations is - u_email_address.

Our service is subscription based. Our payment provider makes the charge you have received for the renewal of the subscription.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

We are sorry that the subscription information was unclear to you before the purchase.

Your u_product_name subscription was successfully cancelled. No additional charges will occur.

Your refund of refund_sum u_currency has been processed. It may take up to 5 days for it to reflect in your Paypal balance. If you paid by debit or credit card, the money will be refunded to your card. Depending on your card issuer, it may take up to 10 days for your refund to appear on a bank statement.

We do really care for our customers and are willing to improve our service further. Could you please share the reason for your dissatisfaction in more detail? 

Your answer will help us to understand what was wrong and will give us the possibility to resolve the issue in the best way!

We are sorry for any problems you have experienced with our product. However, we will be happy if you change your mind.

Looking forward to your reply.

Regards,
agent_name
u_product_name Team'''

afraid = '''Hello user_name,

Thank you for your email.

I am afraid, but we did not receive any cancellation requests before and cannot locate any attempts to cancel the subscription via application either.

In case you were not aware of the subscription terms, let me explain this to you.

You have purchased a personalized plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

This is the confirmation, that your u_product_name subscription has been canceled at your request.
u_remove
Could you please share the reason why you stopped using our service back then?

I would really appreciate your feedback and honesty since it will greatly help us to improve our product.

Looking forward to hearing from you soon!

Regards,
agent_name
u_product_name Team'''

afraid_short = '''Hello user_name,

Thank you for your email.

I am afraid, but we did not receive any cancellation requests before and cannot locate any attempts to cancel the subscription via application either.

In case you were not aware of the subscription terms, let me explain this to you.

You have purchased a personalized plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

This is the confirmation, that your u_product_name subscription has been canceled at your request.
u_remove
Could you please share the reason why you stopped using our service back then?

Looking forward to hearing from you soon!

Regards,
agent_name
u_product_name Team'''

about_to_refund = '''Hello user_name,

Thank you for your email.

We are sorry that the subscription information was unclear to you before the purchase. Let me explain your subscription terms.

You have purchased a personalized plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

This is the confirmation, that your u_product_name subscription has been canceled at your request. There will be no other charges.

Your plan remains active by the end of the paid period.
u_remove u_experience
You can reactivate your account at a cheaper price of 6.99 u_currency per month or 19.99 u_currency per six months at any time, just send me a message and I will be happy to assist you.

Regards,
agent_name
u_product_name Team'''

about_to_refund_short = '''Hello user_name,

Thank you for your email.

We are sorry that the subscription information was unclear to you before the purchase. Let me explain your subscription terms.

You have purchased a personalized plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

This is the confirmation, that your u_product_name subscription has been canceled at your request. There will be no other charges.

Your plan remains active by the end of the paid period.
u_remove
You can reactivate your account at a cheaper price of 6.99 u_currency per months or 19.99 u_currency per months at any time, just send me a message and I will be happy to assist you.

Regards,
agent_name
u_product_name Team'''

descriptor_charges = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

If I can help you or have any questions, please feel free to reply to this email. We will get back to you as soon as possible.

Regards,
agent_name
u_product_name Team'''

descriptor_charges_short = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

If I can help you or have any questions, please feel free to reply to this email. We will get back to you as soon as possible.

Regards,
agent_name
u_product_name Team'''

no_app = '''Hello user_name,

Thank you for your email.

I can understand how frustrating it must be to be charged without using the service you paid for.

I am very sorry that you did not have the opportunity to evaluate the benefits of our service earlier.

You have purchased a personalized plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

You can now download the mobile application for the plan, upon opening the app, please choose "I already have an account", then "Continue with email" and you will be taken to Log in screen, make sure you enter the correct email. 

You will find the u_link to download the app below: 

app_link

Also, please keep in mind that if you want to use our app, the minimum supported version of the operating system is min_android_apple. 

I look forward to you trying our product and telling us about your experience.

Let me know if you have any questions. We will be happy to assist you. 

Regards,
agent_name
u_product_name Team'''

payment_failed_no_plan = '''Hello user_name,

Thank you for contacting u_product_name Support Team!

I apologize for the inconvenience! 

I have checked your transaction history in our system and found out that your payment attempt related to the email address u_email_address failed. Don't worry, no money has been charged by our service.

Could you please advise me if maybe there is another email address that you used?

If you are sure, you have used the same email during registration, please provide us with the following information:

1) Date of the Payment;

2) If you used PayPal, please send us your PayPal email address or Paypal Invoice ID;

3) If you used a credit or debit card, please send us the 6 first and the last 4 digits of your card.

4) If you paid in AppStore / Google Play, please share the screenshot of the invoice/store subscription.

It will help me to find your transaction asap and help you with the issue.

Looking forward to hearing from you!

Regards,
agent_name
u_product_name Team'''

discount = '''Hello user_name,

Thank you for contacting us.

I am sorry to hear that the price of the u_product_name app is not suitable for you at the moment. However, and I believe that money shouldn’t be a reason to stop on your way to the goal, so here is one thing we can do.

You are an extremely valuable customer to us. I have created a link with your discount applied: you can click here. This way you can get your plan at the lowest possible price, while still getting access to all the features of the u_product_name app.

Would this be something that works for you?

Regards,
agent_name
u_product_name Team'''

transfer_to_billing = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

After the u_day_trial trial for u_sum_trial u_currency, the subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

Your subscription was canceled, there will be no other charges.

I have also forwarded your refund request to our Billing Department for review.

Our billing manager will make sure to check all the information properly and get back to you via email within 2 to 3 business days notifying you about their decision.

We genuinely appreciate your patience.

Regards,
agent_name
u_product_name Team'''

transfer_to_billing_short = '''Hello user_name,

Thank you for reaching out to us.

You have purchased a personalised plan - u_product_name.

The email used for registration is - u_email_address.

Our service is subscription-based. The charge you have received is made by our payment provider for subscription renewal.

The subscription is automatically renewed for u_sum_full_price u_currency at the end of each period (every u_period) until you cancel the subscription.

You needed to cancel your subscription at least 24 hours before the renewal date in order not to be charged for the service.

A link to the terms of the subscription information about the charges is displayed on the page prior to entering payment details.

We are sorry that the subscription information was unclear to you before the purchase.

Your subscription was canceled, there will be no other charges.

I have also forwarded your refund request to our Billing Department for review.

Our billing manager will make sure to check all the information properly and get back to you via email within 2 to 3 business days notifying you about their decision.

We genuinely appreciate your patience.

Regards,
agent_name
u_product_name Team'''

macro_list = [why_charged, why_charged_short, pp_refund_descriptor, pp_refund_descriptor_short, afraid, afraid_short,
              about_to_refund, about_to_refund_short, descriptor_charges, descriptor_charges_short, no_app,
              payment_failed_no_plan, discount, transfer_to_billing, transfer_to_billing_short]
macro_list = [macro.replace('agent_name', 'Ethan') for macro in macro_list]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(688, 621)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(-1, 0, 0, -1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Name = QtWidgets.QLineEdit(self.centralwidget)
        self.Name.setEnabled(True)
        self.Name.setMinimumSize(QtCore.QSize(0, 35))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Name.setFont(font)
        self.Name.setObjectName("Name")
        self.Name.setPlaceholderText('User\'s name')
        self.verticalLayout.addWidget(self.Name)
        self.email = QtWidgets.QLineEdit(self.centralwidget)
        self.email.setEnabled(True)
        self.email.setMinimumSize(QtCore.QSize(0, 35))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.email.setFont(font)
        self.email.setObjectName("email")
        self.email.setPlaceholderText('Email')
        self.verticalLayout.addWidget(self.email)
        self.product = QtWidgets.QLineEdit(self.centralwidget)
        self.product.setEnabled(True)
        self.product.setMinimumSize(QtCore.QSize(0, 35))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.product.setFont(font)
        self.product.setText("")
        self.product.setObjectName("product_2")
        self.product.setPlaceholderText('Product')
        self.verticalLayout.addWidget(self.product)
        self.refundsum = QtWidgets.QLineEdit(self.centralwidget)
        self.refundsum.setEnabled(True)
        self.refundsum.setMinimumSize(QtCore.QSize(0, 35))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.refundsum.setFont(font)
        self.refundsum.setObjectName("refundsum")
        self.refundsum.setPlaceholderText('Refund amount')
        self.verticalLayout.addWidget(self.refundsum)
        self.clear = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.user_clear())
        self.clear.setObjectName("clear")
        self.verticalLayout.addWidget(self.clear)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.chose_macro = QtWidgets.QComboBox(self.centralwidget)
        self.chose_macro.setMinimumSize(QtCore.QSize(0, 35))
        self.chose_macro.setObjectName("chose_macro")
        self.verticalLayout_2.addWidget(self.chose_macro)

        self.chose_macro.addItem('Why charged', [0, 1])
        self.chose_macro.addItem('PP refund + descriptor', [2, 3])
        self.chose_macro.addItem('Why charged + descriptor + Afraid', [4, 5])
        self.chose_macro.addItem('About to refund', [6, 7])
        self.chose_macro.addItem('Descriptor charges', [8, 9])
        self.chose_macro.addItem('No app + descriptor', [10, 10])
        self.chose_macro.addItem('Payment failed no plan found', [11, 11])
        self.chose_macro.addItem('Discount', [12, 12])
        self.chose_macro.addItem('Des. charges + transfer to billing', [13, 13])
        self.chose_macro.activated.connect(self.refund)

        self.apple = QtWidgets.QCheckBox(self.centralwidget)
        self.apple.setMinimumSize(QtCore.QSize(0, 35))
        self.apple.setObjectName("apple")
        self.verticalLayout_2.addWidget(self.apple)
        self.android = QtWidgets.QCheckBox(self.centralwidget)
        self.android.setMinimumSize(QtCore.QSize(0, 35))
        self.android.setObjectName("apple_android_2")
        self.verticalLayout_2.addWidget(self.android)
        self.Generate = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.generate(macro_list, remove))
        self.Generate.setMinimumSize(QtCore.QSize(0, 65))
        self.Generate.setObjectName("Generate")
        self.verticalLayout_2.addWidget(self.Generate)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 0, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 0, 1, 1, 1)
        self.textEdit.setMinimumSize(QtCore.QSize(690, 35))
        self.horizontalLayout.addLayout(self.gridLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 688, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "UM&MM"))
        self.clear.setText(_translate("MainWindow", "Clear"))
        self.apple.setText(_translate("MainWindow", "Apple (App Store)"))
        self.android.setText(_translate("MainWindow", "Android (Play Store)"))
        self.Generate.setText(_translate("MainWindow", "Generate"))


    def refund(self):
        # Refund SUM
        if self.chose_macro.activated and self.chose_macro.currentText() == 'PP refund + descriptor':
            trial_full = [x.split('.') for x in self.product.text().split() if len(x.split('.')) > 1]
            if len(trial_full) == 2:
                full_price = list(map(int, trial_full[1]))
                self.refundsum.setText(f'{full_price[0]}.{full_price[1]}')
            elif len(trial_full) == 1:
                full_price = list(map(int, trial_full[0]))
                self.refundsum.setText(f'{full_price[0]}.{full_price[1]}')
        if self.chose_macro.activated and self.chose_macro.currentText() == 'No app + descriptor':
            self.android.setChecked(True)
            self.apple.setChecked(True)
        if self.chose_macro.activated and self.chose_macro.currentText() == 'Discount':
            self.email.setPlaceholderText('Enter admin Uuid')



    def generate(self, macro_list, remove):

        # Name, email, refund_sum
        macro_list = [macro.replace('user_name', self.Name.text().capitalize().strip()) for macro in macro_list]
        macro_list = [macro.replace('u_email_address', self.email.text().strip()) for macro in macro_list]
        macro_list = [macro.replace('refund_sum', self.refundsum.text()) for macro in macro_list]

        # IOS ANDROID
        mm_ios_link = 'https://apps.apple.com/us/app/mad-muscles-home-workouts/id1526814298'
        mm_android_link = 'https://play.google.com/store/apps/details?id=com.amomedia.madmuscles'
        unimeal_ios_link = 'https://apps.apple.com/us/app/unimeal-weight-loss-plan/id1501323016?ls=1'
        unimeal_android_link = 'https://play.google.com/store/apps/details?id=com.unimeal.android'

        ios_link = 'IOS:'
        android_link = 'Android:'

        min_android_apple = '6.0 for Android and 13.6 for IOS'
        min_apple = '13.6 for IOS'
        min_android = '6.0 for Android'

        experience = 'I look forward to you trying our product and telling us about your experience.'

        # Android Apple
        if 'MM' in self.product.text():
            macro_list = [macro.replace('u_product_name', 'Mad Muscles') for macro in macro_list]
            mm = f'https://madmuscles.com/pricing/{self.email.text()}?pp=58&ftm=default&tmr=no&utm_campaign=support&utm_medium=email&utm_source=newsletter'
            macro_list[12] = f'{macro_list[12]}\n\n{mm}'
            if self.apple.isChecked() and self.android.isChecked():
                remove = remove.replace('u_link', 'links')
                remove = remove.replace('app_link', f'{ios_link}\n\n{mm_ios_link}\n\n{android_link}\n\n{mm_android_link}')
                remove = remove.replace('min_android_apple', f'{min_android_apple}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'links') for macro in macro_list]
                macro_list = [
                    macro.replace('app_link', f'{ios_link}\n\n{mm_ios_link}\n\n{android_link}\n\n{mm_android_link}') for
                    macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_android_apple}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            elif self.apple.isChecked():
                remove = remove.replace('u_link', 'link')
                remove = remove.replace('app_link', f'{mm_ios_link}')
                remove = remove.replace('min_android_apple', f'{min_apple}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'link') for macro in macro_list]
                macro_list = [macro.replace('app_link', f'{mm_ios_link}') for macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_apple}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            elif self.android.isChecked():
                remove = remove.replace('u_link', 'link')
                remove = remove.replace('app_link', f'{mm_android_link}')
                remove = remove.replace('min_android_apple', f'{min_android}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'link') for macro in macro_list]
                macro_list = [macro.replace('app_link', f'{mm_android_link}') for macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_android}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            else:
                macro_list = [macro.replace('u_remove', '') for macro in macro_list]
                macro_list = [macro.replace('u_experience', '') for macro in macro_list]
        elif 'UM' in self.product.text():
            macro_list = [macro.replace('u_product_name', 'Unimeal') for macro in macro_list]
            um = f'https://unimeal.com/final-quiz/{self.email.text()}?pp=66&tmr=0&utm_campaign=support&utm_medium=email&utm_source=newsletter'
            macro_list[12] = f'{macro_list[5]}\n\n{um}'
            if self.apple.isChecked() and self.android.isChecked():
                remove = remove.replace('u_link', 'links')
                remove = remove.replace('app_link', f'{ios_link}\n\n{unimeal_ios_link}\n\n{android_link}\n\n{unimeal_android_link}')
                remove = remove.replace('min_android_apple', f'{min_android_apple}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'links') for macro in macro_list]
                macro_list = [macro.replace('app_link',
                                            f'{ios_link}\n\n{unimeal_ios_link}\n\n{android_link}\n\n{unimeal_android_link}')
                              for macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_android_apple}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            elif self.apple.isChecked():
                remove = remove.replace('u_link', 'link')
                remove = remove.replace('app_link', f'{unimeal_ios_link}')
                remove = remove.replace('min_android_apple', f'{min_apple}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'link') for macro in macro_list]
                macro_list = [macro.replace('app_link', f'{unimeal_ios_link}') for macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_apple}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            elif self.android.isChecked():
                remove = remove.replace('u_link', 'link')
                remove = remove.replace('app_link', f'{unimeal_android_link}')
                remove = remove.replace('min_android_apple', f'{min_android}')
                remove = remove.replace('u_email_address', self.email.text().strip())
                #
                macro_list = [macro.replace('u_link', 'link') for macro in macro_list]
                macro_list = [macro.replace('app_link', f'{unimeal_android_link}') for macro in macro_list]
                macro_list = [macro.replace('min_android_apple', f'{min_android}') for macro in macro_list]
                #
                macro_list = [macro.replace('u_remove', remove) for macro in macro_list]
                macro_list = [macro.replace('u_experience', f'\n{experience}\n') for macro in macro_list]
            else:
                macro_list = [macro.replace('u_remove', '') for macro in macro_list]
                macro_list = [macro.replace('u_experience', '') for macro in macro_list]

        # PRODUCT_CURRENCY
        if 'EUR' in self.product.text():
            macro_list = [macro.replace('u_currency', 'EUR') for macro in macro_list]
        elif 'GBP' in self.product.text():
            macro_list = [macro.replace('u_currency', 'GBP') for macro in macro_list]
        else:
            macro_list = [macro.replace('u_currency', 'USD') for macro in macro_list]

            # PRODUCT TRIAL TIME
        if 'INTR 7 days' in self.product.text():
            macro_list = [macro.replace('u_day_trial', '7-days') for macro in macro_list]
        elif 'INTR month' in self.product.text():
            macro_list = [macro.replace('u_day_trial', 'one-month') for macro in macro_list]
        elif 'INTR 3 month' in self.product.text():
            macro_list = [macro.replace('u_day_trial', 'three-month') for macro in macro_list]
        elif 'INTR 6 month' in self.product.text():
            macro_list = [macro.replace('u_day_trial', 'six-month') for macro in macro_list]
        elif 'INTR email month 3.99 - 29.99' in self.product.text():
            macro_list = [macro.replace('u_day_trial', 'one-month') for macro in macro_list]

        # Product full time
        if '- month' in self.product.text():
            macro_list = [macro.replace('u_period', 'month') for macro in macro_list]
        elif '- 3 month' in self.product.text():
            macro_list = [macro.replace('u_period', 'three months') for macro in macro_list]
        elif '- 6 month' in self.product.text():
            macro_list = [macro.replace('u_period', 'six months') for macro in macro_list]
        elif '3months' in self.product.text():
            macro_list = [macro.replace('u_period', 'three months') for macro in macro_list]
        elif 'INTR email month 3.99 - 29.99' in self.product.text():
            macro_list = [macro.replace('u_period', 'month') for macro in macro_list]

        # Product trial price
        trial_full = [x.split('.') for x in self.product.text().split() if len(x.split('.')) > 1]
        if len(trial_full) == 2:
            trial_price = list(map(int, trial_full[0]))
            full_price = list(map(int, trial_full[1]))
            macro_list = [macro.replace('u_sum_trial', f'{trial_price[0]}.{trial_price[1]}') for macro in macro_list]
            macro_list = [macro.replace('u_sum_full_price', f'{full_price[0]}.{full_price[1]}') for macro in macro_list]
        elif len(trial_full) == 1:
            full_price = list(map(int, trial_full[0]))
            macro_list = [macro.replace('u_sum_full_price', f'{full_price[0]}.{full_price[1]}') for macro in macro_list]

        if '' in self.product.text():
            macro_list = [macro.replace('u_sum_trial', '') for macro in macro_list]
        elif '' in self.product.text():
            macro_list = [macro.replace('u_sum_trial', '') for macro in macro_list]

        # CHOOSE MACRO
        if len(trial_full) == 2:
            self.textEdit.setText(macro_list[self.chose_macro.currentData()[0]])
        elif len(trial_full) == 1:
            self.textEdit.setText(macro_list[self.chose_macro.currentData()[1]])
        elif self.chose_macro.currentText() == 'Payment failed no plan found':
            self.textEdit.setText(macro_list[self.chose_macro.currentData()[0]])
        elif self.chose_macro.currentText() == 'Discount':
            self.textEdit.setText(macro_list[self.chose_macro.currentData()[0]])



    def user_clear(self):
        self.Name.setText('')
        self.email.setText('')
        self.product.setText('')
        self.refundsum.setText('')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
